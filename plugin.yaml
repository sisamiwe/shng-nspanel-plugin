# Metadata for the plugin
plugin:
    # Global plugin attributes
    type: interface                  # plugin type (gateway, interface, protocol, system, web)
    description:
        de: 'Plugin zur Steuerung von NSPanels, die mit Tasmota und LoveLaceUI ausgestattet sind. Die Kommunikation erfolgt über das MQTT Module von SmartHomeNG.'
        en: 'Plugin to control NSPanels equipped with Tasmota firmware and LoveLaceUI. Communication is handled through the MQTT module of SmartHomeNG.'
    maintainer: sisamiwe
#    tester:                         # Who tests this plugin?
    state: develop                   # change to ready when done with development
#    keywords: iot iot
#    documentation: https://github.com/smarthomeNG/smarthome/wiki/CLI-Plugin        # url of documentation (wiki) page
#    support: https://knx-user-forum.de/forum/supportforen/smarthome-py

    version: 1.0.0                  # Plugin version
    sh_minversion: 1.8              # minimum shNG version to use this plugin
#    sh_maxversion:                 # maximum shNG version to use this plugin (leave empty if latest)
#    py_minversion: 3.6             # minimum Python version to use for this plugin
#    py_maxversion:                 # maximum Python version to use for this plugin (leave empty if latest)
    multi_instance: true            # plugin supports multi instance
    restartable: unknown
    classname: NSPanel         # class containing the plugin

parameters:
    # Definition of parameters to be configured in etc/plugin.yaml (enter 'parameters: NONE', if section should be empty)
    full_topic:
        type: str
        default: '%prefix%/%topic%/'
        description:
            de: Vollständiges Topic (Prefix und Topic) zur Kommunikation mit den NSPanel
            en: Full topic (prefix und topic) for communication with NSPanel

    topic:
        type: str
        default: 'NSPanel1'
        description:
            de: Topic des NSPanel
            en: topic of NSPanel

    telemetry_period:
        type: int
        default: 300
        valid_min: 10
        valid_max: 3600
        description:
            de: Zeitabstand in Sekunden in dem das NSPanel Telemetrie Daten senden sollen
            en: Timeperiod in seconds in which the NSPanel shall send telemetry data

    config_file_location:
        type: str
        default: 'plugins/priv_nspanel/nspanel_pages_demo.yaml'
        description:
            de: 'Speicherort der Konfigurationsdatei relativ zum smarthome Ordner bspw: /usr/local/smarthome/plugins/_priv_nspanel/nspanel_pages.yaml'
            en: 'Location of Config_file relatively to smarthome directory e.g. /usr/local/smarthome/plugins/_priv_nspanel/nspanel_pages.yaml'

    model:
        type: str
        default: 'eu'
        valid_list:
          - 'eu'
          - 'us-p'
          - 'us-l'
        description:
            de: Model des NSPanel
            en: model of NSPanel
            
    firmware_check:
        type: str
        default: 'notify'
        valid_list:
          - 'off'
          - 'notify'
        description:
            de: Prüft beim Start, ob Display-Firmware mit Plugin zusammenpasst. off = keine Prüfung, notify = Nachricht mit Möglichkeit zum Update
            en: Checks at startup if display firmware matches to plugin. off = no check, notify = noification with possibility to update
    
    brightness:
        type: int
        default: 50
        valid_min: 0 # off
        valid_max: 100
        description:
            de: ...
            en: ...

    temperatureUnit:
        type: str
        default: '°C'
        valid_list:
          - '°C'
          - '°F'
        description:
            de: ...
            en: ...

    defaultBackgroundColor:
        type: str
        default: 'Black'
        description:
            de: ...
            en: ...

    defaultColor:
        type: str
        default: 'White'
        description:
            de: ...
            en: ...

    defaultOffColor:
        type: str
        default: 'White'
        description:
            de: ...
            en: ...

    defaultOnColor:
        type: str
        default: 'Yellow'
        description:
            de: ...
            en: ...

    webif_pagelength:
        type: int
        valid_list:
          - -1
          - 0
          - 25
          - 50
          - 100
        description:
            de: 'Anzahl an Items, die standardmäßig in einer Web Interface Tabelle pro Seite angezeigt werden.
                 0 = automatisch, -1 = alle'
            en: 'Amount of items being listed in a web interface table per page by default.
                 0 = automatic, -1 = all'
        description_long:
            de: 'Anzahl an Items, die standardmäßig in einer Web Interface Tabelle pro Seite angezeigt werden.\n
                 Bei 0 wird die Tabelle automatisch an die Höhe des Browserfensters angepasst.\n
                 Bei -1 werden alle Tabelleneinträge auf einer Seite angezeigt.'
            en: 'Amount of items being listed in a web interface table per page by default.\n
                 0 adjusts the table height automatically based on the height of the browser windows.\n
                 -1 shows all table entries on one page.'

item_attributes:

    nspanel_topic:
        type: str
        description:
            de: Topic um mit dem NSPanels zu kommunizieren (%topic%)
            en: Topic to be used to communicate with the NSPanels (%topic%)

    nspanel_attr:
        type: str
        default: online
        description:
            de: "Zu lesendes/schreibendes Attribut des NSPanels."
            en: "Attribute of NSPanels shall be read/written."
        valid_list:
            - online
            - relay1
            - relay2
            - screensaver_active
            - screensaver_update
            - temp_analog
            - temp_esp32
            - uptime
            - wifi_signal

    nspanel_update:
        type: str
        default: weather
        description:
            de: "Änderungen des Items aktualisieren Teile der Bildschirmschoner-Karte."
            en: "Changes of the item refresh parts of the screensaver card."
        valid_list:
            - weather
            - status
            - time # for secondLine

    nspanel_popup:
        type: str
        default: notify
        description:
            de: "Pageunabhängige Items des NSPanels."
            en: "Page independent item of NSPanel."
        valid_list:
            - notify
            - notify_screensaver
            - timer
        valid_list_description:
            de:
              - "Inhalt wird als PopupNotify angezeigt.-> dict, w/o"
              - "Inhalt wird auf dem Screensaver angezeigt-> dict, w/o"
              - "Item wird als Zähler für PopupTimer verwendet -> num, r/o"

item_structs:
    default:
        name: Default-Struct

        online:
            type: bool
            nspanel_attr@instance: online

        relay1:
            type: bool
            nspanel_attr@instance: relay1

        relay2:
            type: bool
            nspanel_attr@instance: relay2

        screensaver_active:
            type: bool
            nspanel_attr@instance: screensaver_active

        temperature:
            analog:
                type: num
                nspanel_attr@instance: temp_analog
            esp32:
                type: num
                nspanel_attr@instance: temp_esp32

        uptime:
            type: str
            nspanel_attr@instance: uptime

        wifi_signal:
            type: num
            nspanel_attr@instance: wifi_signal

    demo:
        name: Demo-Struct

        notify_popup:
            type: dict
            nspanel_popup@instance: notify
            initial_value: "{'heading': 'Hinweis', 'text': 'Text\\r\\nmit Umbruch', 'size': 3}"

        notify_screensaver:
            type: dict
            nspanel_popup@instance: notify_screensaver
            initial_value: "{'heading': 'Hinweis', 'text': 'Text\\r\\nmit Umbruch'}"

        Screensaver:
            secondLine:
                type: str
                initial_value: 'Some text'
                nspanel_update@instance: time

            statusIcon:
                nspanel_update@instance: status
                Left:
                    type: dict
                    nspanel_update@instance: ..:.
                    initial_value: "{'icon': 'email', 'color': 'White'}"
                Right:
                    type: dict
                    nspanel_update@instance: ..:.
                    initial_value: "{'icon': 'phone', 'color': 'White'}"

            Wetter_Heute:
                nspanel_update@instance: weather
        
                Icon:
                    type: num
                    nspanel_update@instance: ..:.
                    initial_value: 803
                Text:
                    type: str
                    nspanel_update@instance: ..:.
                    initial_value: 23 °C
                SecondIcon:
                    type: str
                    nspanel_update@instance: ..:.
                    initial_value: 'home-thermometer'
                SecondText:
                    type: str
                    nspanel_update@instance: ..:.
                    initial_value: '22.1 °C'

            Wetter_Tag1:
                type: str
                initial_value: 'Tag1'
                nspanel_update@instance: weather

                Icon:
                    type: num
                    initial_value: 800
                    nspanel_update@instance: ..:.
                Text:
                    type: str
                    initial_value: 13 °C
                    nspanel_update@instance: ..:.

            Wetter_Tag2:
                type: str
                initial_value: 'Tag2'
                nspanel_update@instance: weather

                Icon:
                    type: num
                    initial_value: 210
                    nspanel_update@instance: ..:.
                Text:
                    type: str
                    initial_value: 3 °C
                    nspanel_update@instance: ..:.

            Wetter_Tag3:
                type: str
                initial_value: 'Tag3'
                nspanel_update@instance: weather

                Icon:
                    type: num
                    initial_value: 300
                    nspanel_update@instance: ..:.
                Text:
                    type: str
                    initial_value: -7 °C
                    nspanel_update@instance: ..:.

            Wetter_Tag4:
                type: str
                initial_value: 'Tag4'
                nspanel_update@instance: weather

                Icon:
                    type: num
                    initial_value: 600
                    nspanel_update@instance: ..:.
                    
                Text:
                    type: str
                    initial_value: -17 °C
                    nspanel_update@instance: ..:.

        timer:
            type: num
            nspanel_popup@instance: timer
            eval: value-1 if value > 0 and sh..timer(1, value-1) is None else value # not perfect but works

        chart:
            type: list
            eval: sh.env.system.load.series('avg', '1d', count=50).get('series') # only example for format of data
            cycle: 600

        Licht:
            type: bool
            
            Helligkeit:
                type: num
            Farbtemperatur:
                type: num
            Farbe:
                type: num

        Rolladen:
            move:
                type: bool
                enforce_updates: true
            stop:
                type: bool
                enforce_updates: true
            pos:
                type: num
                enforce_updates: true
            tilt:
                type: num
                enforce_updates: true

        Ventilator:
            type: bool

            Geschwindigkeit:
                type: num
                initial_value: 25
            Preset:
                type: str
                initial_value: 'Normal'

        Heizung:
            Istwert:
                type: num
                initial_value: 20.4
            Sollwert:
                type: num
                initial_value: 21
            Betriebsart:
                type: num

        Alarm:
            Aktion:
                type: bool
            Modus1:
                type: bool
            Modus2:
                type: bool
            Modus3:
                type: bool
            Modus4:
                type: bool

        Media:
            Title:
                type: str
                initial_value: "Musiktitel"
            Author:
                type: str
                initial_value: "Künstler"
            Volume:
                type: num
                initial_value: 10
            Play:
                type: bool
            Pause:
                type: bool
            Back:
                type: bool
            Next:
                type: bool
            Shuffle:
                type: bool
            Preset1:
                type: str
            Preset2:
                type: str

        wlan:
            SSID:
                type: str
                initial_value: 'MeineSSID'
            PW:
                type: str
                initial_value: 'MeinPW'

        Power:
            Home:
                type: str
                initial_value: '60 %'
            Links:
                type: str
                initial_value: '0.4 kW'
            Rechts1:
                type: str
                initial_value: '-0.5 kW'
            Rechts2:
                type: str
                initial_value: '0.1 kW'

        Text:
            type: str
            initial_value: '33 %'

        Button:
            type: bool
            enforce_updates: true

        Schalter:
            type: bool

        Nummer:
            type: num

        Auswahl:
            type: str
            enforce_updates: true
            initial_value: 'Szene1'

    simulation:
        name: Simulation eines NSPanels

        send_msg_no:
            type: num
            enforce_updates: yes
            initial_value: -1
            
        send_msg_dict:
            type: dict
            enforce_updates: yes
            initial_value: '{"CustomRecv": ""}'
            
        send_message:
            type: str
            eval: sh.nspanel.send_mqtt_from_nspanel(value)
            eval_trigger: 
              - ..send_msg_no
              - ..send_msg_dict


plugin_functions: NONE
    # Definition of plugin functions defined by this plugin (enter 'plugin_functions: NONE', if section should be empty)

logic_parameters: NONE
    # Definition of logic parameters defined by this plugin (enter 'logic_parameters: NONE', if section should be empty)
